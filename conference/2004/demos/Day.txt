COMPUTER-ASSISTED INTEGRATIVE THINKING TO FIGHT CANCERA demonstration proposal for the 7th International Protégé Conference, July 2004 Roger S. Day, University of Pittsburgh; William E. Shirey, University of Pittsburgh; Michele Morris, University of Pittsburgh       Biomedical scientists reason with published and unpublished data to generate or assess hypotheses. Some task areas of this reasoning are gathering information, forming a conceptual model, imagining how the model system would behave, and drawing conclusions. Each of these task areas is increasingly challenging with advances in scientific knowledge, and especially demanding on the “great generalists”, for example cancer clinical trialists, who must attempt the synthesis of several or many biological and clinical processes, and many scientific disciplines. We identify essential elements of architecture in this software assistant, examined in the context of cancer research, and demonstrate their implementation in the Oncology Thinking Cap (OncoTCap).      OncoTCap Version 4 is a Java-based program that integrates knowledge capture support with model-building and model-validation for cancer. Knowledge representation is based on the Protégé system.  Three interconnected work processes are supported by OncoTCap: (1) knowledge capture, (2) code-mapping, and (3) application building. The lynchpin connecting these three processes is the “Encoding” class, holding free-text instructions for running a simulation.       The knowledge capture work process has the Encoding as its end product; the Encoding is the starting point of the two other work processes. The code-mapping work process involves searching a catalog of “Statement Templates”, each of which represents a simple or composite idea as a sentence with “blanks” or parameters, and then representing the Encoding by selecting a pre-existing Statement Template and “filling in the blanks”. Each Statement Template has previously been tied to Java code. The application building work process involves grouping selected Encodings to create “Submodels”, “Submodel Groups”, and finally “Model Controllers”.       The resulting Model Controllers contain specifications for automatically generating simulation-based applications of various kinds, such as validation suites, treatment optimization routines, and patient simulators for professional training.  A complete runnable model results from assembling all Java code from statement templates, after substitution of values. The model can simultaneously contain behaviors of individual cancer cells, microenvironment conditions including other cell populations, patient physiologic functions such as metabolism, adverse event targets, patients, oncologists and their patient management plans, protocol implementation, and even IRB review.      The synthesis of cancer research information from many sources and utilization for comprehensive multi-purpose cancer modeling is feasible. In the near term, this should be useful for clinical researchers and basic scientists in planning new studies and exercising their imaginations. In the far term, the architecture should support the construction of patient-specific models for adaptive biologically-based treatment decisions.         In this demonstration, we will walk through the three work processes, for gathering and organizing knowledge, for mapping knowledge into model instructions, and for building applications.  We also demonstrate the result: an interactive runnable cancer modeling application. 